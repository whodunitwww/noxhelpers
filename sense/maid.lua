local a={}a.__index=a;function a.new()return setmetatable({_tasks={},_features={},_indices={},_threads={}},a)end;function a:AddTask(b,c)assert(b~=nil,"Task cannot be nil")if c then assert(type(c)=="string"or type(c)=="number","Feature must be a string or number")self._features[c]=self._features[c]or{}table.insert(self._features[c],b)end;table.insert(self._tasks,b)if typeof(b)=="thread"then table.insert(self._threads,b)end;return b end;function a:Add(b)assert(b~=nil,"Task cannot be nil")return self:AddTask(b)end;function a:GiveTask(b)assert(b~=nil,"Task cannot be nil")return self:AddTask(b)end;function a:GivePromise(d)assert(d~=nil,"Promise cannot be nil")if d.Status=="Rejected"or d.Status=="Resolved"then return d end;local e;e=d:Finally(function()self:Remove(e)end)return self:AddTask(e)end;function a:__newindex(f,b)if b==nil then self:Remove(self._indices[f])self._indices[f]=nil;return end;self._indices[f]=b;self:AddTask(b)end;function a:Remove(b)if b==nil then return end;for g,h in ipairs(self._tasks)do if h==b then local i=table.remove(self._tasks,g)self:_cleanupTask(i)return end end;for c,j in pairs(self._features)do for g,h in ipairs(j)do if h==b then local i=table.remove(j,g)self:_cleanupTask(i)return end end end;for g,h in ipairs(self._threads)do if h==b then table.remove(self._threads,g)return end end end;function a:_cleanupTask(b)if b==nil then return end;local k=typeof(b)if k=="function"then b()elseif k=="RBXScriptConnection"then b:Disconnect()elseif k=="Instance"then b:Destroy()elseif k=="thread"then if coroutine.status(b)~="dead"then pcall(function()coroutine.close(b)end)end elseif k=="table"then if b.Destroy then b:Destroy()elseif b.Disconnect then b:Disconnect()elseif b.destroy then b:destroy()elseif b.disconnect then b:disconnect()elseif b.Clean then b:Clean()elseif b.cancel then b:cancel()end end end;function a:Clean()for l,b in ipairs(self._tasks)do self:_cleanupTask(b)end;table.clear(self._tasks)table.clear(self._features)table.clear(self._indices)table.clear(self._threads)end;function a:Cleanup(c)if c then assert(type(c)=="string"or type(c)=="number","Feature must be a string or number")for l,b in ipairs(self._features[c]or{})do self:_cleanupTask(b)end;self._features[c]={}for g=#self._tasks,1,-1 do local b=self._tasks[g]for l,m in ipairs(self._features[c]or{})do if b==m then table.remove(self._tasks,g)break end end end;return end;for l,b in ipairs(self._tasks)do self:_cleanupTask(b)end;self._tasks={}self._features={}self._indices={}self._threads={}end;function a:Destroy()self:Cleanup()end;function a:DoCleaning()self:Cleanup()end;return a
